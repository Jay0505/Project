using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;

namespace project_assignment3
{

	class Node
	{
		private string Data;
		private Node First;
		private Node Next;
		private Node Parent;

		public string pdata
		{
			get
			{
				return Data;
			}
			set
			{
				Data = value;
			}
		}

		public Node pfirst
		{
			get
			{
				return First;
			}

			set
			{
				First = value;
			}
		}

		public Node pnext
		{
			get
			{
				return Next;
			}
			set
			{
				Next = value;
			}
		}

		public Node pparent
		{
			get
			{
				return Parent;
			}
			set
			{
				Parent = value;
			}
		}

		public Node()
		{
			pdata = string.Empty;
			pfirst = null;
			pnext = null;
			pparent = null;
		}

		public Node(string data)
		{
			pdata = data;
			pfirst = null;
			pnext = null;
			pparent = null;
		}
		public Node(string data, Node firstt, Node next, Node parent)
		{
			Data = data;
			First = firstt;
			Next = next;
			Parent = parent;
		}
	}

//------------------------------------------------------------------------------------------------------------------------------------------------//
//------------------------------------------------------------------------------------------------------------------------------------------------//

	class MainClass
	{
		public static Stack<char> operator_st = new Stack<char>();
		public static Stack<string> operand_st = new Stack<string>();
		public static Stack<string> bracket_st = new Stack<string>();
		public static Stack<Node> node_st = new Stack<Node>();
		public static Stack<Node> node_der = new Stack<Node>();
		public static Stack<Node> derivative_result = new Stack<Node>();



		public static void Main(string[] args)
		{

			Console.WriteLine("\nEnter your regular expression");
			string stregex = Console.ReadLine();

			Console.WriteLine("\nEnter your string");
			string str = Console.ReadLine();



			Node root = ConstructTree(stregex);
			if (root == null)
				Console.WriteLine("\nPlease enter valid regular expression");

			else
			{
				Console.WriteLine("--------------------------------------------------------");
				Console.WriteLine("Contents of the regular expression expression tree are :");
				Display_Contents_of_the_node(root);
				Console.WriteLine(Nullable(root));
			}

			/*Node deri_node = new Node();

			for (int i = 0; i <= str.Length - 1; i++)
			{
				char alp = str[i];
				if (i == 0)
					deri_node = Derivative(root, str[i]);

				else
					deri_node = Derivative(deri_node, str[i]);

				derivative_result.Push(deri_node);

			}
			Console.WriteLine("--------------------------------------------------------");
			Console.WriteLine("The contents of derinode are : ");
			Display_Contents_of_the_node(deri_node);
			bool IsDerivativeNullable = Nullable(deri_node);
			Console.WriteLine("Is the deri node nullable? : {0} ", IsDerivativeNullable);
			Console.WriteLine("Number of contents in der stack is {0}", derivative_result.Count);
			if (IsDerivativeNullable)
			{
				Node mkeps_node = mkeps(deri_node);
				//derivative_result.Pop();
				Console.WriteLine("----------------------------------------------------");
				Console.WriteLine("mkeps result : ");
				Display_Contents_of_mkeps_node(mkeps_node);

				Node inject_result = new Node();
				for (int i = str.Length - 1; i >= 0; i--)
				{
					Node deri_node2 = derivative_result.Pop();
					if (i == str.Length - 1)
						inject_result = Inject(deri_node2, str[i], mkeps_node);

					else
						inject_result = Inject(deri_node2, str[i], inject_result);
				}
				Console.WriteLine("----------------------------------------------------");
				Console.WriteLine("Inject result: ");
				Display_Contents_of_mkeps_node(inject_result);
			}
			if (derivative_result.Count != 0)
			{
				Console.WriteLine("Adhi kaaliga ledra saami");
			}*/
		}

//-------------------------------------------------------------------------------------------------------------------------------------------------//
//-------------------------------------------------------------------------------------------------------------------------------------------------//
		public static bool Nullable(Node Nullable_root)
		{
			
			bool IsNullable = false;
			if (Nullable_root != null)
			{
				if (char.IsLetter(Convert.ToChar(Nullable_root.pdata)))
				{
					IsNullable = false;
				}
				if (Nullable_root.pdata == "*")
					IsNullable = true;

				if (Nullable_root.pdata == "!")
					IsNullable = true;

				if (Nullable_root.pdata == "@")
					IsNullable = false;

				if (Nullable_root.pdata == "+")
				{
					if (Nullable(Nullable_root.pfirst))
					{
						IsNullable = true;
					}
					else
					{
					   bool plus = Nullable_Auxillary_function(Nullable_root);
						if (plus)
							IsNullable = true;
						else
							IsNullable = false;
						
					}
				}

				if (Nullable_root.pdata == "~")
				{
					if (!Nullable(Nullable_root.pfirst))
					{
						IsNullable = false;
					}
					else
					{
					bool concat = Nullable_Auxillary_function(Nullable_root);
						if (concat)
							IsNullable = true;
						else
							IsNullable = false;
						
					}
				}



			}
			else
				IsNullable = true;



			return IsNullable;
		}


//----------------------------------------------------------------------------------------------------------------------------------------------//
//----------------------------------------------------------------------------------------------------------------------------------------------//
		public static bool Nullable_Auxillary_function(Node Nullable_root)
		{
			bool temp2 = false;
			bool IsNullablePlus = false;
			bool IsNullableConcat = false;
			bool IsPlusChanged = false;
			bool IsConcatChanged = false;
			bool return_value = false;

			Node temp_first = Nullable_root.pfirst;
			Node temp_next = temp_first.pnext;

			if (Nullable_root.pdata == "+")
			{
				while (temp_next != null)
				{
					temp2 = Nullable(temp_next);
					if (temp2 == true)
					{
						IsNullablePlus = true;
						IsPlusChanged = true;
					}
					temp_next = temp_next.pnext;
				}
				if (IsPlusChanged == false)
					IsNullablePlus = false;

				return_value = IsNullablePlus;
			}

			if (Nullable_root.pdata == "~")
			{
				while (temp_next != null)
				{
					temp2 = Nullable(temp_next);
					if (temp2 == false)
					{
						IsNullableConcat = false;
						IsConcatChanged = true;
					}
					temp_next = temp_next.pnext;
				}
				if (IsConcatChanged == false)
					IsNullableConcat = true;

				return_value = IsNullableConcat;
				
			}

			return return_value;
		}


//-------------------------------------------------------------------------------------------------------------------------------------------------//
//-------------------------------------------------------------------------------------------------------------------------------------------------//

		public static Node Derivative(Node Der_node, char c)
		{

			Node node_Null = new Node("@");
			Node node_empty = new Node("!");
			char Der_char = Convert.ToChar(Der_node.pdata);

			if (Der_node == null || Der_node.pdata == null)
				return node_Null;


			if (Der_node.pdata == "+")
			{
				var Der_aux_plus_node = Derivative_Auxillary_plus(Der_node, c);
				return Der_aux_plus_node;

			}

			if (Der_node.pdata == "~")
			{
				if (Nullable(Der_node.pfirst))
				{
					var Der_aux_con_node = Derivative_Auxillary_Concatenation(Der_node, c);
					return Der_aux_con_node;
				}
				else
				{
					var Der_aux_con_node = Derivative_Auxillary_Concatenation_Else(Der_node, c);
					return Der_aux_con_node;
				}

			}

			if (Der_node.pdata == "*")
			{
				Node Der_aux_star_node = Derivative_Auxillary_Star(Der_node, c);
				return Der_aux_star_node;
			}

			if (Der_char == c)
				return node_empty;

			else
				return node_Null;


		}

//-----------------------------------------------------------------------------------------------------------------------------------------------//
//-----------------------------------------------------------------------------------------------------------------------------------------------//
		public static Node Derivative_Auxillary_plus(Node Der_node, char c)
		{
			Node opr_node = new Node("+");


			var node1 = Derivative(Der_node.pfirst, c);
			Node der_next = Der_node.pfirst.pnext;

			while (der_next != null)
			{
				var node2 = Derivative(der_next, c);
				node_der.Push(node2);
				der_next = der_next.pnext;
			}

			opr_node.pfirst = node1;
			node1.pparent = opr_node;
			var temp_node1 = node1;
			while (node_der.Count != 0)
			{
				temp_node1.pnext = node_der.Pop();
				temp_node1.pnext.pparent = opr_node;
				temp_node1 = temp_node1.pnext;
			}

			return opr_node;
		}

//------------------------------------------------------------------------------------------------------------------------------------------------//
//------------------------------------------------------------------------------------------------------------------------------------------------//

		public static Node Derivative_Auxillary_Concatenation_Else(Node Der_node, char c)
		{
			Node return_node = new Node();
			var opr_node = new Node("~");
			if (Der_node.pdata == "~")
			{
				Node Der_first_node = Der_node.pfirst;
				Node Der_next_node = new Node();
				Der_next_node = Der_node.pfirst.pnext;

				var node1 = Derivative(Der_first_node, c);
				opr_node.pfirst = node1;
				node1.pparent = opr_node;

				Node temp_first_node = opr_node.pfirst;
				while (Der_next_node != null)
				{
					temp_first_node.pnext = Der_next_node;
					Der_next_node.pparent = opr_node;

					temp_first_node = temp_first_node.pnext;
					Der_next_node = Der_next_node.pnext;
				}
				return_node = opr_node;

			}
			if (Char.IsLetter(Convert.ToChar(Der_node.pdata)))
			{
				Node else_node = Derivative(Der_node, c);

				if (Der_node.pnext != null)
				{
					opr_node.pfirst = else_node;
					else_node.pparent = opr_node;

					Node temp_first_node = opr_node.pfirst;
					Node temp = Der_node.pnext;
					while (temp != null)
					{
						temp_first_node.pnext = temp;
						temp.pparent = opr_node;

						temp = temp.pnext;
						temp_first_node = temp_first_node.pnext;
					}
					return_node = opr_node;
				}
				else
					return_node = else_node;


			}
			return return_node;

		}

//-----------------------------------------------------------------------------------------------------------------------------------------------//
//-----------------------------------------------------------------------------------------------------------------------------------------------//

		public static Node Derivative_Auxillary_Concatenation(Node Der_node, char c)
		{
			Node return_node = new Node();
			Node concat_node = new Node("~");
			Node plus_node = new Node("+");
			if (Der_node.pdata == "~")
			{
				Node Der_first_node = Der_node.pfirst;
				Node Der_next_node = Der_node.pfirst.pnext;
				Node Derivative_next_node = new Node();
				Node Derivative_first_node = Derivative(Der_first_node, c);
				if (Nullable(Der_next_node))
				{
					if (Der_next_node.pdata == "*")
						Derivative_next_node = Derivative_Auxillary_Star(Der_next_node, c);

					else
						Derivative_next_node = Derivative_Auxillary_Concatenation(Der_next_node, c);

				}
				else
				{
					Derivative_next_node = Derivative_Auxillary_Concatenation_Else(Der_next_node, c);
				}

				concat_node.pfirst = Derivative_first_node;
				Derivative_first_node.pparent = concat_node;

				Node temp_first_node = concat_node.pfirst;
				while (Der_next_node != null)
				{
					temp_first_node.pnext = Der_next_node;
					Der_next_node.pparent = concat_node;

					temp_first_node = temp_first_node.pnext;
					Der_next_node = Der_next_node.pnext;
				}

				plus_node.pfirst = concat_node;
				concat_node.pparent = plus_node;

				concat_node.pnext = Derivative_next_node;
				Derivative_next_node.pparent = plus_node;

				return_node = plus_node;
			}

			if (Char.IsLetter(Convert.ToChar(Der_node.pdata)))
			{
				Node else_node = Derivative(Der_node, c);
				if (Der_node.pnext != null)
				{
					Node opr_node = new Node("~");
					opr_node.pfirst = else_node;
					else_node.pparent = opr_node;

					Node temp_first_node = opr_node.pfirst;
					Node temp = Der_node.pnext;
					while (temp != null)
					{
						temp_first_node.pnext = temp;
						temp.pparent = opr_node;

						temp = temp.pnext;
						temp_first_node = temp_first_node.pnext;
					}
					return_node = opr_node;
				}
				else
					return_node = else_node;


			}
			return return_node;

		}

//-----------------------------------------------------------------------------------------------------------------------------------------------//
//-----------------------------------------------------------------------------------------------------------------------------------------------//

		public static Node Derivative_Auxillary_Star(Node Der_node, char c)
		{
			Node concat_node = new Node("~");
			Node derivative_node = new Node();
			Node star_node = Der_node;
			Node star_first_node = Der_node.pfirst;



			derivative_node = Derivative(Der_node.pfirst, c);

			concat_node.pfirst = derivative_node;
			derivative_node.pnext = star_node;

			star_node.pparent = concat_node;
			derivative_node.pparent = concat_node;

			return concat_node;

		}




//------------------------------------------------------------------------------------------------------------------------------------------------//
//------------------------------------------------------------------------------------------------------------------------------------------------//

		public static Node mkeps(Node deri_node)
		{
			Node return_node = new Node();

			if (deri_node.pdata == "!")
			{
				Node empty_node = new Node("()");
				return_node = empty_node;
			}

			if (deri_node.pdata == "~")
			{
				Node seq_node = new Node("Seq");
				Node temp_node = mkeps(deri_node.pfirst);
				Node result_br_node = mkeps_seq_auxillary(temp_node);

				seq_node.pfirst = result_br_node;
				result_br_node.pparent = seq_node;

				Node seq_first_node = seq_node.pfirst;
				Node deri_node_next = deri_node.pfirst.pnext;

				while (deri_node_next != null)
				{
					Node seq_result = mkeps(deri_node_next);
					Node result_br_node_2 = mkeps_seq_auxillary(seq_result);

					seq_first_node.pnext = result_br_node_2;
					result_br_node_2.pparent = seq_node;

					deri_node_next = deri_node_next.pnext;
					seq_first_node = seq_first_node.pnext;
				}

				return_node = seq_node;
			}

			if (deri_node.pdata == "+")
			{
				if (Nullable(deri_node.pfirst))
				{
					Node left_node = new Node("Left");
					return_node = mkeps_plus_auxillary(deri_node.pfirst, left_node);
				}

				else
				{
					Node right_node = new Node("Right");
					return_node = mkeps_plus_auxillary(deri_node.pfirst.pnext, right_node);
				}
			}

			if (deri_node.pdata == "*")
			{
				Node star_node = new Node("Star []");
				return_node = star_node;
			}

			return return_node;
		}

//------------------------------------------------------------------------------------------------------------------------------------------------//
//------------------------------------------------------------------------------------------------------------------------------------------------//
		public static Node mkeps_seq_auxillary(Node deri_node)
		{
			Node left_br = new Node("(");
			Node right_br = new Node(")");

			left_br.pfirst = deri_node;
			deri_node.pnext = right_br;

			deri_node.pparent = right_br.pparent = left_br;

			return left_br;
		}

//-------------------------------------------------------------------------------------------------------------------------------------------------//
//-------------------------------------------------------------------------------------------------------------------------------------------------//
		public static Node mkeps_plus_auxillary(Node deri_node, Node direct_node)
		{
			Node left_br = new Node("(");
			Node right_br = new Node(")");

			Node plus_node_result = mkeps(deri_node);
			direct_node.pfirst = left_br;
			left_br.pnext = plus_node_result;
			plus_node_result.pnext = right_br;

			left_br.pparent = plus_node_result.pparent = right_br.pparent = direct_node;

			return direct_node;

		}


//-------------------------------------------------------------------------------------------------------------------------------------------------//
//------------------------------------------------------------------------------------------------------------------------------------------------//
		public static Node Inject(Node regex, char c, Node mkeps_node)
		{
			Node return_node = new Node();

			if (mkeps_node.pdata == "()" && regex.pdata == "!")
			{
				string str = "char " + c.ToString();
				Node char_node = new Node(str);
				return_node = char_node;
			}

			if (regex.pdata == "+" && mkeps_node.pdata == "Left" && mkeps_node.pfirst.pdata == "(")
			{
				Node inject_left = new Node("Left");
				Node inject_plus_left = Inject(regex.pfirst, c, mkeps_node.pfirst.pnext);
				Node inject_aux_left = inject_plus_auxillary(inject_plus_left, inject_left);

				return_node = inject_aux_left;
			}

			if (regex.pdata == "+" && mkeps_node.pdata == "Right" && mkeps_node.pfirst.pdata == "(")
			{
				Node inject_right = new Node("Right");
				Node inject_plus_right = Inject(regex.pfirst.pnext, c, mkeps_node.pfirst.pnext);
				Node inject_aux_right = inject_plus_auxillary(inject_plus_right, inject_right);

				return_node = inject_aux_right;
			}

			if (regex.pdata == "~" && mkeps_node.pdata == "Seq")
			{



				Node r1 = regex.pfirst;
				Node v1 = mkeps_node.pfirst.pfirst;
				Node v2 = mkeps_node.pfirst.pnext.pfirst;

				return_node = inject_left_seq_auxillary(r1, v1, v2, c);
					
			}

			if (regex.pdata == "~" && mkeps_node.pdata == "Left" && mkeps_node.pfirst.pnext.pdata == "Seq")
			{
				Node seq = mkeps_node.pfirst.pnext;
				Node r1 = regex.pfirst;
				Node v1 = seq.pfirst.pfirst;
				Node v2 = seq.pfirst.pnext.pfirst;

				return_node = inject_left_seq_auxillary(r1, v1, v2, c);

			}

			if (regex.pdata == "~" && mkeps_node.pdata == "Right")
			{
				Node seq = new Node("Seq");
				Node v2 = mkeps_node.pfirst.pnext;
				Node r1 = regex.pfirst;

				Node mkeps_r1 = mkeps(r1);
				Node mkeps_r1_br = mkeps_seq_auxillary(mkeps_r1);

				seq.pfirst = mkeps_r1_br;
				mkeps_r1_br.pparent = seq;

				Node regex_temp = regex.pfirst.pnext;
				Node seq_pfirst = seq.pfirst;
				while (regex_temp != null)
				{
					Node br = mkeps_seq_auxillary( Inject(regex_temp, c, v2));
					seq_pfirst.pnext = br;
					br.pparent = seq;

					seq_pfirst = seq_pfirst.pnext;
					regex_temp = regex_temp.pnext;
				}

				return_node = seq;

			}


			return return_node;
		}

//-----------------------------------------------------------------------------------------------------------------------------------------------//
//-----------------------------------------------------------------------------------------------------------------------------------------------//
		public static Node inject_plus_auxillary(Node inject_node, Node direct_node)
		{
			Node left_br = new Node("(");
			Node right_br = new Node(")");

			direct_node.pfirst = left_br;
			left_br.pnext = inject_node;
			inject_node.pnext = right_br;

			left_br.pparent = inject_node.pparent = right_br.pparent = direct_node;

			return direct_node;
		}


		public static Node inject_left_seq_auxillary(Node r1, Node v1, Node v2, char c)
		{
			Node left_br = new Node("(");
			Node right_br = new Node(")");
			Node inject_seq = new Node("Seq");
			Node inject_seq_aux = Inject(r1, c, v1);

			inject_seq.pfirst = left_br;
			left_br.pfirst = inject_seq_aux;
			inject_seq_aux.pnext = right_br;

			inject_seq_aux.pparent = right_br.pparent = left_br;
			left_br.pparent = inject_seq;

			left_br.pnext = v2;
			v2.pparent = inject_seq;

			return inject_seq;
		}

//----------------------------------------------------------------------------------------------------------------------------------------------------//
//--------------------------------------------------------------------------------------------------------------------------------------------------//
		public static Node ConstructTree(string regex)
		{
			int no_of_characters_scanned = 0;
			for (int i = regex.Length - 1; i >= 0; i--)
			{
				no_of_characters_scanned++;
				if (regex[i] == ')')
					bracket_st.Push(regex[i].ToString());
				if (regex[i] == '(')
				{
					bracket_st.Pop();

				}


				if (char.IsLetter(regex[i]))
					operand_st.Push(regex[i].ToString());


				if (char.IsSymbol(regex[i]) || regex[i] == '*')
				{
					if (regex[i] == '*' && regex[i - 1] != ')' && char.IsLetter(regex[i - 1]))
					{
						Node node1 = new Node(regex[i].ToString());
						Node node2 = new Node(regex[i - 1].ToString());

						node1.pfirst = node2;
						node2.pparent = node1;
						node_st.Push(node1);
						i = i - 1;
						no_of_characters_scanned = no_of_characters_scanned + 1;
					}
					else
					{
						if (operator_st.Count == 0)
						{
							if (node_st.Count == 0)
								Concatenating_operands();
							else
								Concatenating_operands_in_operand_node_stack_together();


						}
						else
							Dealing_when_Operator_encountered();

						operator_st.Push(regex[i]);
					}
				}

			}


			if (no_of_characters_scanned == regex.Length && (operand_st.Count != 0 || operator_st.Count != 0 || node_st.Count != 0))
			{
				if (bracket_st.Count != 0)
				{
					if (node_st.Count != 0)
					{
						while (node_st.Count == 0)
						{
							node_st.Pop();
						}
					}
					return null;
				}
				Construttree_Auxillary();
			}

			Node main_root = node_st.Pop();
			return main_root;

		}

//-------------------------------------------------------------------------------------------------------------------------------------------------//
//-------------------------------------------------------------------------------------------------------------------------------------------------//
		public static void Construttree_Auxillary()
		{

			if (operand_st.Count != 0 && node_st.Count == 0 && operator_st.Count == 0)
				Concatenating_operands();

			if (operand_st.Count != 0 && operator_st.Count == 0 && node_st.Count != 0)
				Concatenate_operand_and_node_stack_elements_0_operators();

			if (operand_st.Count == 0 && operator_st.Count == 0 && node_st.Count != 0)
			{
				if (node_st.Count >= 2)
					Concatenate_nodestack_elements_when_0_operands_and_operators();

			}

			if (operand_st.Count == 0 & operator_st.Count != 0 && node_st.Count != 0)
			{

			}


			while (operator_st.Count != 0)
			{
				char operator1 = operator_st.Pop();
				if (operator_st.Count == 0)
				{
					if (operator1 == '*' && operand_st.Count == 0)
						Star_operator_encountered(operator1);
					if (operator1 == '*' && operand_st.Count != 0)
					{
						Concatenating_operands();
						Star_operator_encountered(operator1);
					}
				}

				if (operator_st.Count == 0 && operator1 != '*')
				{
					Concatenating_operands();
					Node parent_operator = new Node(operator1.ToString());
					Node node1 = node_st.Pop();
					Node node2 = node_st.Pop();

					node1.pnext = node2;
					parent_operator.pfirst = node1;
					node1.pparent = node2.pparent = parent_operator;
					node_st.Push(parent_operator);

				}


				if (operator_st.Count != 0)
				{
					operator_st.Push(operator1);
					Dealing_when_Operator_encountered();
				}
			}

		}


//-------------------------------------------------------------------------------------------------------------------------------------------------//
//-------------------------------------------------------------------------------------------------------------------------------------------------//

		public static void Star_operator_encountered(char operator1)
		{
			Node main_root2 = new Node(operator1.ToString());
			Node last_node = node_st.Pop();
			main_root2.pfirst = last_node;
			last_node.pparent = main_root2;
			node_st.Push(main_root2);
		}

//-----------------------------------------------------------------------------------------------------------------------------------------------//
//-----------------------------------------------------------------------------------------------------------------------------------------------//

		public static void Concatenating_operands()
		{
			int first_node = 0;

			if (operand_st.Count == 0)
				return;

			if (operand_st.Count == 1)
			{
				string operand = operand_st.Pop();
				Node str = new Node(operand);
				node_st.Push(str);
				return;
			}

			if (operand_st.Count >= 2)
			{
				Node parent_operator = new Node("~");
				while (operand_st.Count != 0)
				{
					string operand = operand_st.Pop();
					Node str = new Node(operand);
					if (first_node == 0 && parent_operator.pfirst == null)
					{
						parent_operator.pfirst = str;
						str.pparent = parent_operator;
						first_node++;
					}
					else
					{
						Node temp_node = parent_operator.pfirst;
						while (temp_node.pnext != null)
						{
							temp_node = temp_node.pnext;
						}
						temp_node.pnext = str;
						str.pparent = parent_operator;
					}
				}
				node_st.Push(parent_operator);
			}
		}

//------------------------------------------------------------------------------------------------------------------------------------------------//
//------------------------------------------------------------------------------------------------------------------------------------------------//

		public static void Concatenating_operands_in_operand_node_stack_together()
		{
			while (operand_st.Count != 0)
			{
				Node node1 = new Node(operand_st.Pop());
				node_st.Push(node1);
			}
			if (operand_st.Count == 0 && node_st.Count != 0)
				Concatenate_nodestack_elements_when_0_operands_and_operators();
		}

//-------------------------------------------------------------------------------------------------------------------------------------------------//
//------------------------------------------------------------------------------------------------------------------------------------------------//

		public static void Concatenate_nodestack_elements_when_0_operands_and_operators()
		{
			int first_node = 0;
			Node parent_node = new Node("~");
			if (node_st.Count > 1)
			{
				while (node_st.Count != 0)
				{
					Node str = node_st.Pop();

					if (first_node == 0 && parent_node.pfirst == null)
					{
						parent_node.pfirst = str;
						str.pparent = parent_node;
						first_node++;
					}
					else
					{
						Node temp_node = parent_node.pfirst;
						while (temp_node.pnext != null)
						{
							temp_node = temp_node.pnext;
						}
						temp_node.pnext = str;
						str.pparent = parent_node;
					}
				}
				node_st.Push(parent_node);
			}


		}

//----------------------------------------------------------------------------------------------------------------------------------------------//
//----------------------------------------------------------------------------------------------------------------------------------------------//

		public static void Concatenate_operand_and_node_stack_elements_0_operators()
		{
			Node parent_node = new Node("~");
			while (operand_st.Count != 0)
			{
				Node temp_node = new Node(operand_st.Pop());
				if (parent_node.pfirst == null)
				{
					parent_node.pfirst = temp_node;
					temp_node.pparent = parent_node;
				}
				else
				{
					Node next_node = parent_node.pfirst;
					while (next_node.pnext != null)
					{
						next_node = next_node.pnext;
					}
					next_node.pnext = temp_node;
					temp_node.pparent = parent_node;
				}

			}

			while (node_st.Count != 0)
			{
				Node str = node_st.Pop();
				Node temp_node = parent_node.pfirst;
				while (temp_node.pnext != null)
				{
					temp_node = temp_node.pnext;
				}
				temp_node.pnext = str;
				str.pparent = parent_node;

			}

			node_st.Push(parent_node);
		}

//-----------------------------------------------------------------------------------------------------------------------------------------------//
//-----------------------------------------------------------------------------------------------------------------------------------------------//

		public static void Dealing_when_Operator_encountered()
		{
			Concatenating_operands();

			char operatorr = operator_st.Pop();
			if (operatorr == '*')
			{
				operator_st.Push(operatorr);
				return;
			}

			if (node_st.Count >= 2)
			{
				Node parent_operator = new Node(operatorr.ToString());
				Node node1 = node_st.Pop();
				Node node2 = node_st.Pop();

				node1.pnext = node2;
				parent_operator.pfirst = node1;
				node1.pparent = node2.pparent = parent_operator;
				node_st.Push(parent_operator);
			}
		}

//------------------------------------------------------------------------------------------------------------------------------------------------//
//------------------------------------------------------------------------------------------------------------------------------------------------//
		public static void Display_Contents_of_the_node(Node root_node)
		{
			Queue<Node> st = new Queue<Node>();
			st.Enqueue(root_node);
			while (st.Count != 0)
			{
				Node temp_Dfs_node = st.Dequeue();
				if (temp_Dfs_node.pparent != null)
					Console.WriteLine("\tthe data is {0} and its parent is {1} ", temp_Dfs_node.pdata, temp_Dfs_node.pparent.pdata);
				else
					Console.WriteLine("The root value is {0} ", temp_Dfs_node.pdata);

				if (temp_Dfs_node.pfirst != null)
				{
					st.Enqueue(temp_Dfs_node.pfirst);
					Node next_node = temp_Dfs_node.pfirst;
					while (next_node.pnext != null)
					{
						st.Enqueue(next_node.pnext);
						next_node = next_node.pnext;
					}
				}
			}
		}

		//----------------------------------------------------------------------------------------------------------------------------------------------------//
		//--------------------------------------------------------------------------------------------------------------------------------------------------//
		public static void Display_Contents_of_mkeps_node(Node mkeps_node)
		{
			if (mkeps_node != null)
			{
				Console.Write(mkeps_node.pdata);
				Display_Contents_of_mkeps_node(mkeps_node.pfirst);
				Display_Contents_of_mkeps_node(mkeps_node.pnext);
			}
		}


	}
}
